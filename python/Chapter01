# [스터디] 파이썬 :: 1. 파이썬 소개 및 개발환경 구축
> 작성일: 2018.07.08 , 작성자: 문서희

이번 장에서는 파이썬과 개발 환경 구축에 관하여 학습합니다.

파이썬이란 무엇인지를 이해하고 간단한 발전사 및 파이썬이 강한 분야, 장단점을 알아봅니다. Visual Studio Code 기반의 파이썬 개발 환경을 구축하기 위한 Python 플러그인 사용법을 살펴봅니다.

### 목차
1. [파이썬이란](#m1)
2. [파이썬의 발전사](#m2)
3. [파이썬이 강한 분야](#m3)
4. [파이썬의 장단점](#m4)
5. [개발환경](#m5)
6. [참고자료](#m6)

---

<a id="m1"></a> 
## 1. 파이썬이란

프로그래밍 언어 중 하나로 1991년 네덜란드 수학자 귀도 반 로섬에 의해 개발되었다. 파이썬이라는 이름은 귀도 반 로섬이 좋아하는 코미디 프로그램 “Monty Python's Flying Circus”에서 따온 것이다. 다양한 플랫폼에서 쓸 수 있고, 라이브러리가 풍부하여 대학 및 여러 교육 기관, 연구 기관, 산업계에서 이용이 증가하고 있다. 

파이썬은 기본적으로 인터프리터 위에서 실행 될 것을 염두에 두고 설계 되었으며, 들여쓰기를 사용해서 블록을 구분하는 독특한 문법을 채용하고 있다. 

### 파이썬 인기
코드 경진대회 서비스를 제공하는 코드이벨은 파이썬을 ‘2016년 프로그래밍 인기 순위 1위’로 꼽았으며, 프로그래밍 인기 순위를 매달 집계하는 레드몽크(RedMonk)나 티오베(Tiobe)도 파이썬의 인기 순위는 5위 안에 들어왔다. 그만큼 최근 인기가 높아지고 있다.

 구글은 파이썬을 많이 사용하는 기업으로 알려져 있다. 구글 내부에서 사용하는 코드리뷰 도구, ‘앱 엔진’ 같은 클라우드 제품 등이 파이썬을 이용해 만들어졌다.

야후,인더스트리얼 라이트 앤드 매직 (ILM),미국항공우주국 (NASA),미국 해양 대기청 (NOAA),카카오 등도 파이썬을 이용하고 있다.

### 파이썬 핵심 철학
```
- 아름다운게 추한 것보다 낫다. (Beautiful is better than ugly)
- 명시적인 것이 암시적인 것보다 낫다. (Explicit is better than implicit)
- 단순함이 복잡함보다 낫다. (Simple is better than complex)
- 복잡함이 난해한 것보다 낫다. (Complex is better than complicated)
- 가독성은 중요하다. (Readability counts)
```
파이썬은 언어의 핵심에 모든 기능을 넣는 대신, 사용자가 언제나 필요로 하는 최소한의 기능만을 사용하면서 확장해나갈 수 있도록 디자인되었다.

파이썬에서는 프로그램의 문서화가 매우 중시되고 있어 언어의 기본 기능에 포함되어 있다. 파이썬은 원래 교육용으로 설계되었기 때문에 읽기 쉽고, 그래서 효율적인 코드를 되도록 간단하게 쓸 수 있도록 하려는 철학이 구석 구석까지 침투해 있어, 파이썬 커뮤니티에서도 알기 쉬운 코드를 선호하는 경향이 강하다.



<a id="m2"></a> 
## 2. 파이썬의 발전사
귀도 반 로섬은 CWI 연구소에서 근무하면서 인터프리터 언어를 개선하는 일을 맡게 되었다. 그곳에서 ‘ABC’언어 프로젝트를 하였으나, 4~5년이 지나자 눈에 띄는 성과가 없다는 이유로 프로젝트가 종료되었다. 그는 ‘아모에바’라는 팀으로 옮겨 분산시스템 환경에 대해 연구하는 일을 진행하였다. 

ABC언어 프로젝트와 분산시스템 연구는 귀도 반 로섬이 파이썬을 만드는 데 중요한 영감을 주었다. 그는 “아모에바 프로젝트에 일하면서 하이레벨 언어가 필요하다는 것을 더욱 깨달았다”라며 “새로운 분산환경 시스템에 맞으면서 C와 셀에서 부족한 부분을 채워주는 새로운 언어를 개발하고 싶었다”라고 설명했다. 그렇게 해서 그는 취미활동으로 새로운 언어를 개발하기 시작했다. 
  


귀도 반 로섬은 1989년부터 본격적으로 파이썬을 개발하기 시작하였고, 1990년 파이썬의 첫 버전을 공개했다. 처음은 CWI(Centrum voor Wiskunde en Informatica, 국립 수학 및 컴퓨터 과학 연구기관) 내 동료들이 대부분 이용했으며, 그들의 피드백을 거쳐 개선돼 왔다.

1990년 이후, 외부에서 파이썬에 대한 소규모 세미나와 워크샵이 열리기 시작했다. 이때부터 몇몇 기업들은 파이썬을 실제 서비스에 하나둘 도입하기 시작했다. 귀도 반 로섬은 이후 여러 단체와 기업에서 근무하며 파이썬만 전문적으로 개발했다. 이 과정에서 파이썬에 대한 안전성을 높이고, 오픈소스 라이선스도 좀 더 유연하게 변경했다.

현재 파이썬은 대형 글로벌 기업부터 스타트업까지 다양하게 안정적으로 활용되고 있다. 구글, 야후, 유럽 입자 물리 연구소, 미국 항공우주국 등이 파이썬을 이용해 서비스를 구축했다. 


### 파이썬 버전
- 파이썬 2

    > 파이썬 2.0은 2000년 10월 16일 배포되었다. 전면적인 쓰레기 수집기 탑재와 유니코드 지원이 특징적이다.

- 파이썬 3

    > 파이썬 3.0 버전의 최종판이 2008년 12월 3일자로 발표되었다. 2.X대 버전의 파이썬과 하위호환성이 없다는 것이 가장 큰 특징이다. 2.X대 버전 과의 차이를 간략히 요약하면 다음과 같다. 
```
1. 사전형과 문자열형과 같은 내장 자료형의 내부적인 변화 및 일부 구형의 구성 요소 제거
2. 표준 라이브러리 재배치
3. 향상된 유니코드 지원
4. 한글 변수 사용 가능
5. print명령문이 print()함수로 바뀜
```

파이썬 공식 문서에서는 파이썬 2.x는 낡은 기술이고, 파이썬 3.x가 파이썬의 미래가 될 것이라고 요약을 했는데, 처음 배우는 프로그래머들은 파이썬 3으로 시작하는 것을 권장하고 있다.




<a id="m3"></a> 
## 3. 파이썬이 강한 분야

### 데이터 과학
최근 많이 파이썬을 적용하고 사용하는 주요 분야 중 하나는 데이터과학이다. 파이썬에서 제공하는 데이터 과학 도구는 세계적인 수준으로, 데이터 전문가들이 빅 데이터 이외에도 널리 적용할 수 있는 도구를 제공한다는 점이 강점이다. 

판다스라는 모듈을 이용하면 데이터 분석을 더 쉽고 효과적으로 할 수 있다. 그 외 관련 모듈은 아래와 같다.


```
bokeh : 대화형 그래픽을 웹 페이지로 내보내는 기술 모음
matplotlib/seaborn : ipython,주피터 노트북과 통합할 수 있는 그래픽 모듈 종합세트.
numpy : 다차원 데이터를 효율적으로 저장하고 조작하는 기능을 제공. 
scipy : 숫자 데이터 분석에 최적화된 과학 모듈 모음으로 numpy의 기능을 보완, 확장.
pandas : numpy와 matplotlib를 기반으로 만들어졌다. 최적화된 분석 자료구조와 도구를 제공. 
scikit-learn : 머신러닝 알고리즘과 파이썬으로 구현한 기술 모음

```
- 파이썬과 데이터과학을 배울 수 있는 pyData 웹사이트 : (http://pydata.org)

### 웹 데이터 작업
웹은 보통 텍스트 기반 플랫폼으로 구성되어 있으므로 파이썬은 웹과 궁합이 잘 맞으며 표준 라이브러리는 JSON, HTML, XML 및 비슷한 텍스트 기반 형식과 관련 인터넷 프로토콜을 이용할 수 있도록 다양한 모듈을 제공한다.

Requests 모듈을 이용하면 간단하면서도 강력한 파이썬 API를 통해 HTTP, 웹서비스와 상호작용 할 수 있다. 그 외 관련 모듈은 아래와 같다.


```
인터넷 데이터 처리 (https://docs.python.org/3/library/netdata.html)
구조화된 마크업 처리 도구 (https://docs.python.org/3/library/markup.html)
인터넷 프로토콜 지원 (https://docs.python.org/3/library/internet.html)
```


### 데이터베이스 프로그래밍
파이썬은 데이터베이스에 접근할 수 있게 해주는 도구들을 제공한다.

피클(pickle)이라는 모듈은 파이썬에서 사용되는 자료들을 변형없이 그대로 파일에 저장하고 불러오는 일들을 할 수 있다.

<a id="m4"></a> 
## 4. 파이썬 장단점
### 장점

1. 높은생산성과 빠른구현 및 유지보수, 관리가 쉬움

3. 문법이 쉬워 초보자도 쉽게 배우고 이해할수 있다.

4. 파이썬은 라즈베리파이가 기반으로 하고 있는 만큼 사물인터넷에서의 인기를 얻을 것이다.

5. 외부의 풍부한 라이브러리가 있어 다양한 용도로 확장이 좋음

6. 들여쓰기로 블록 표현을 할 수 있으며, 직관적인 소스코드는 읽고 쓰는데 편리하다.


### 단점
1.	속도가 느리다

2.	모바일 앱 개발 환경에서 이용하기 힘들다

3.	컴파일 시 타입 검사가 이뤄지지 않아 개발자가 실수할 여지가 조금 더 많다

4.	동시다발적인 멀티스레드를 처리하거나 CPU에 집중된 많은 스레드를 처리하는 데 적합한 언어는 아니다. 




<a id="m5"></a> 
## 5. 개발 환경 구축
Visual Studio Code를 이용하여 파이썬 개발을 하는 환경을 세팅합니다. 더불어 Visual Studio Code에 깃허브를 연동시키는 작업을 합니다.

기본적으로 git(https://opentutorials.org/course/2708/15129)과 비쥬얼스튜디오 코드(https://code.visualstudio.com/), Python(https://www.python.org/)을 설치해주세요.

### 비쥬얼 스튜디오 코드 모듈 설치
Visual Studio Code의 왼쪽의 여러 아이콘들 중 가장 하단에 있는 아이콘 EXTENSIONS를  클릭 (ctrl+shift+x)

- Markdown Preview Github Styling _ Matt Bierner
- GitHub _ KnisterPeter
- Python _ Microsoft

위 세 가지 모듈을 설치

### 파이썬 가상환경
1. 파이썬 설치 확인을 위해 터미널에 `python`이라고 입력을 한다. 

```
Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)] on win32

Type "help", "copyright", "credits" or "license" for more information.
```
위와 같은 문구가 나오지 않는다면 파이썬 설치를 다시 해 볼 것.

2. 폴더를 하나 만든다. `mkdir 폴더명`

3. 터미널에 `python -m venv 폴더명` 입력

4. `cd 폴더명`을 터미널에 입력하여 해당 폴더로 이동.

5. `cd Scripts`를 터미널에 입력하여, 폴더 안에 있는 Scripts 폴더로 이동.

6. `activate`를 입력하여 활성화 시킨다.
    > cmd 터미널이 아닐 경우 오류가 발생 할 수 있음.

### cmd 터미널 열기
1. ctrl+shift+p를 하여 Terminal: Create New Integrated Terminal를 선택
2. Command Prompt 를 선택하면 cmd 터미널 창이 생성된다.


### 깃허브 연결
1. github(https://github.com/)에서 Settings >  Developer settings > Personal access tokens로 이동한다.
    > 비쥬얼스튜디오 코드에서 깃허브에 연결하기 위한 토큰(인증키)를 받기위함

2. Generate new token 선택 후, Token description에 토큰 이름을 설정하고 repo만 체크 후 생성한다. 

3. vscode 가서 (ctrl+shift+p) : github set personal accese token 선택 후 토큰을 입력한다.

4. github가서 clone or download 복사한다.

5. vscode가서 (ctrl+shift+p) > git clone > url입력 > 저장할 폴더 선택 


<a id="m6"></a>
## 참고자료
1. Head First Python, 개정판: 스스로 질문하며 답을 찾는 파이썬 학습서(Python 3), https://books.google.co.kr/books?id=puFBDwAAQBAJ&pg=PA595&lpg=PA595&dq=%ED%8C%8C%EC%9D%B4%EC%8D%AC+%EA%B0%95%ED%95%9C+%EB%B6%84%EC%95%BC&source=bl&ots=BzB4PUh8RL&sig=5F1tQEbE75RCmG_iqhThBc7-W8g&hl=ko&sa=X&ved=0ahUKEwi9_Zau5IzcAhVSE4gKHUXCD-UQ6AEINTAB#v=onepage&q=%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EA%B0%95%ED%95%9C%20%EB%B6%84%EC%95%BC&f=false

2. Python으로 할 수 있는 것들, https://edu.goorm.io/learn/lecture/787/pycon-2017-%EC%98%81%EC%BD%94%EB%8D%94/lesson/30448/python%EC%9C%BC%EB%A1%9C-%ED%95%A0%EC%88%98-%EC%9E%88%EB%8A%94%EA%B2%83%EB%93%A4

3. 개발자 가이드 : 파이썬, 장단점을 파헤치다, http://www.itworld.co.kr/print/92103

4. 파이썬을 사용하는 이유와 장단점, http://gotwo.tistory.com/69

5. 파이썬, https://terms.naver.com/entry.nhn?docId=3533295&cid=40942&categoryId=32838

6. 파이썬, https://terms.naver.com/entry.nhn?docId=3607513&cid=58598&categoryId=59316

7. 파이썬, https://terms.naver.com/entry.nhn?docId=3580815&cid=59088&categoryId=59096

8. 파이썬, https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%EC%8D%AC
